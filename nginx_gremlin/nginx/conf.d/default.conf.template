stream {
    # Log level must be set to ERROR to see NJS log messages
    error_log /var/log/nginx/error.log ${ENV_NGINX_ERROR_LEVEL};

    # The MIN & MAX Time a request should be delayed before responding
    # The ratio of requests that should be delayed between 0 & 100
    # By default UPSTREAM_DELAY_RATIO is 0

    map '' $UPSTREAM_DELAY_MIN_TIME {
        default ${ENV_UPSTREAM_DELAY_MIN_TIME};
    }
    map '' $UPSTREAM_DELAY_MAX_TIME {
        default ${ENV_UPSTREAM_DELAY_MAX_TIME};
    }
    map '' $UPSTREAM_DELAY_RATIO {
        default ${ENV_UPSTREAM_DELAY_RATIO};
    }

    # Weights for all responses are aggregated and used to determine the behavior
    # By default all weights are 0 except 2XX which will have a weight of 100
    map '' $UPSTREAM_RESPONSE_DRP_WEIGHT {
        default ${ENV_UPSTREAM_RESPONSE_DRP_WEIGHT};
    }
    map '' $UPSTREAM_RESPONSE_2XX_WEIGHT {
        default ${ENV_UPSTREAM_RESPONSE_2XX_WEIGHT};
    }
    # Redirect Response is not currently implemented so ignoring the value
    # map '' $UPSTREAM_RESPONSE_3XX_WEIGHT {
    #     default ${ENV_UPSTREAM_RESPONSE_3XX_WEIGHT};
    # }
    map '' $UPSTREAM_RESPONSE_4XX_WEIGHT {
        default ${ENV_UPSTREAM_RESPONSE_4XX_WEIGHT};
    }
    map '' $UPSTREAM_RESPONSE_5XX_WEIGHT {
        default ${ENV_UPSTREAM_RESPONSE_5XX_WEIGHT};
    }

    js_include conf.d/default.js;

    upstream httpSocket {
        server unix:/var/run/httpSocket.sock;
    }

    upstream httpsSocket {
        server unix:/var/run/httpsSocket.sock;
    }


    server {
        # server endpoint to accept traffic on
        # Expected format is [IP]:[PORT] (*:[PORT] is a valid variable)
        listen ${ENV_SERVER_ADDR_HTTP};

        ## Checks if the request should be delayed
        js_preread mainGremlinPhaseOne;

        ## Checks if the response should be modified
        js_filter  mainGremlinPhaseTwo;

        proxy_pass httpSocket;
    }
    server {
        # server endpoint to accept traffic on
        # Expected format is [IP]:[PORT] (*:[PORT] is a valid variable)
        listen ${ENV_SERVER_ADDR_HTTPS} ssl;

        ssl_certificate /etc/nginx/default.crt;
        ssl_certificate_key /etc/nginx/default.key;


        ## Checks if the request should be delayed
        js_preread mainGremlinPhaseOne;

        ## Checks if the response should be modified
        js_filter  mainGremlinPhaseTwo;

        proxy_ssl on;
        proxy_pass httpsSocket;
    }
}
http {
    # Log level must be set to ERROR to see NJS log messages
    error_log /var/log/nginx/error.log ${ENV_NGINX_ERROR_LEVEL};

    # upstream endpoint to forward traffic to, currently only supports single endpoint
    # Expected format is [IP]:[PORT]

    upstream httpBackend {
        server ${ENV_UPSTREAM_ADDR_HTTP};
    }
    upstream httpsBackend {
        server ${ENV_UPSTREAM_ADDR_HTTPS};
    }

    server {
        listen unix:/var/run/httpSocket.sock default_server;

        location / { proxy_pass http://httpBackend; }
        location /error/400 { return 400; }
        location /error/401 { return 401; }
        location /error/403 { return 403; }
        location /error/404 { return 404; }
        location /error/405 { return 405; }
        location /error/429 { return 429; }
        location /error/444 { return 444; }
        location /error/500 { return 500; }
        location /error/502 { return 502; }
        location /error/503 { return 503; }
        location /error/504 { return 504; }
        location /error { return 404 "ERROR NOT FOUND"; }
    }
    server {
        listen unix:/var/run/httpsSocket.sock default_server ssl;

        ssl_certificate /etc/nginx/default.crt;
        ssl_certificate_key /etc/nginx/default.key;

        location / { proxy_pass http://httpBackend; }
        location /error/400 { return 400; }
        location /error/401 { return 401; }
        location /error/403 { return 403; }
        location /error/404 { return 404; }
        location /error/405 { return 405; }
        location /error/429 { return 429; }
        location /error/444 { return 444; }
        location /error/500 { return 500; }
        location /error/502 { return 502; }
        location /error/503 { return 503; }
        location /error/504 { return 504; }
        location /error { return 404 "ERROR NOT FOUND"; }
    }
}
